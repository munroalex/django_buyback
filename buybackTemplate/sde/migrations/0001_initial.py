# Generated by Django 5.0.7 on 2024-07-14 09:31

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Industryactivity",
            fields=[
                (
                    "typeid",
                    models.AutoField(
                        db_column="typeID", primary_key=True, serialize=False
                    ),
                ),
                ("activityid", models.IntegerField(db_column="activityID")),
                ("time", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "industryActivity",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Industryactivitymaterials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "typeid",
                    models.IntegerField(blank=True, db_column="typeID", null=True),
                ),
                (
                    "activityid",
                    models.IntegerField(blank=True, db_column="activityID", null=True),
                ),
                (
                    "materialtypeid",
                    models.IntegerField(
                        blank=True, db_column="materialTypeID", null=True
                    ),
                ),
                ("quantity", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "industryActivityMaterials",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Industryactivityprobabilities",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "typeid",
                    models.IntegerField(blank=True, db_column="typeID", null=True),
                ),
                (
                    "activityid",
                    models.IntegerField(blank=True, db_column="activityID", null=True),
                ),
                (
                    "producttypeid",
                    models.IntegerField(
                        blank=True, db_column="productTypeID", null=True
                    ),
                ),
                ("probability", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "industryActivityProbabilities",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Industryactivityproducts",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "typeid",
                    models.IntegerField(blank=True, db_column="typeID", null=True),
                ),
                (
                    "activityid",
                    models.IntegerField(blank=True, db_column="activityID", null=True),
                ),
                (
                    "producttypeid",
                    models.IntegerField(
                        blank=True, db_column="productTypeID", null=True
                    ),
                ),
                ("quantity", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "industryActivityProducts",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Industryactivityskills",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "typeid",
                    models.IntegerField(blank=True, db_column="typeID", null=True),
                ),
                (
                    "activityid",
                    models.IntegerField(blank=True, db_column="activityID", null=True),
                ),
                (
                    "skillid",
                    models.IntegerField(blank=True, db_column="skillID", null=True),
                ),
                ("level", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "industryActivitySkills",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Industryblueprints",
            fields=[
                (
                    "typeid",
                    models.AutoField(
                        db_column="typeID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "maxproductionlimit",
                    models.IntegerField(
                        blank=True, db_column="maxProductionLimit", null=True
                    ),
                ),
            ],
            options={
                "db_table": "industryBlueprints",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invcategories",
            fields=[
                (
                    "categoryid",
                    models.AutoField(
                        db_column="categoryID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "categoryname",
                    models.CharField(db_column="categoryName", max_length=150),
                ),
                ("iconid", models.IntegerField(db_column="iconID", null=True)),
                ("published", models.BooleanField(null=True)),
            ],
            options={
                "db_table": "invCategories",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invgroups",
            fields=[
                (
                    "groupid",
                    models.AutoField(
                        db_column="groupID", primary_key=True, serialize=False
                    ),
                ),
                ("categoryid", models.IntegerField(db_column="categoryID", null=True)),
                ("groupname", models.CharField(db_column="groupName", max_length=150)),
                ("iconid", models.IntegerField(db_column="iconID", null=True)),
                (
                    "usebaseprice",
                    models.BooleanField(db_column="useBasePrice", null=True),
                ),
                ("anchored", models.BooleanField(null=True)),
                ("anchorable", models.BooleanField(null=True)),
                (
                    "fittablenonsingleton",
                    models.BooleanField(db_column="fittableNonSingleton", null=True),
                ),
                ("published", models.BooleanField(null=True)),
            ],
            options={
                "db_table": "invGroups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invitems",
            fields=[
                (
                    "itemid",
                    models.AutoField(
                        db_column="itemID", primary_key=True, serialize=False
                    ),
                ),
                ("typeid", models.IntegerField(db_column="typeID")),
                ("ownerid", models.IntegerField(db_column="ownerID")),
                ("locationid", models.IntegerField(db_column="locationID")),
                ("flagid", models.IntegerField(db_column="flagID")),
                ("quantity", models.IntegerField()),
            ],
            options={
                "db_table": "invItems",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invmarketgroups",
            fields=[
                (
                    "marketgroupid",
                    models.AutoField(
                        db_column="marketGroupID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "parentgroupid",
                    models.IntegerField(db_column="parentGroupID", null=True),
                ),
                (
                    "marketgroupname",
                    models.CharField(db_column="marketGroupName", max_length=150),
                ),
                ("description", models.CharField(max_length=150, null=True)),
                ("iconid", models.IntegerField(db_column="iconID", null=True)),
                ("hastypes", models.BooleanField(db_column="hasTypes", null=True)),
            ],
            options={
                "db_table": "invMarketGroups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invmetagroups",
            fields=[
                (
                    "metagroupid",
                    models.AutoField(
                        db_column="metaGroupID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "metagroupname",
                    models.CharField(db_column="metaGroupName", max_length=150),
                ),
                ("description", models.CharField(max_length=150, null=True)),
                ("iconid", models.IntegerField(db_column="iconID", null=True)),
            ],
            options={
                "db_table": "invMetaGroups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invmetatypes",
            fields=[
                (
                    "typeid",
                    models.AutoField(
                        db_column="typeID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "parenttypeid",
                    models.IntegerField(db_column="parentTypeID", null=True),
                ),
                (
                    "metagroupid",
                    models.IntegerField(db_column="metaGroupID", null=True),
                ),
            ],
            options={
                "db_table": "invMetaTypes",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invnames",
            fields=[
                (
                    "itemid",
                    models.AutoField(
                        db_column="itemID", primary_key=True, serialize=False
                    ),
                ),
                ("itemname", models.CharField(db_column="itemName", max_length=150)),
            ],
            options={
                "db_table": "invNames",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invtypematerials",
            fields=[
                (
                    "typeid",
                    models.AutoField(
                        db_column="typeID", primary_key=True, serialize=False
                    ),
                ),
                ("materialtypeid", models.IntegerField(db_column="materialTypeID")),
                ("quantity", models.IntegerField()),
            ],
            options={
                "db_table": "invTypeMaterials",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invtypereactions",
            fields=[
                (
                    "reactiontypeid",
                    models.AutoField(
                        db_column="reactionTypeID", primary_key=True, serialize=False
                    ),
                ),
                ("input", models.BooleanField()),
                ("typeid", models.IntegerField(db_column="typeID")),
                ("quantity", models.IntegerField(null=True)),
            ],
            options={
                "db_table": "invTypeReactions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Invtypes",
            fields=[
                (
                    "typeid",
                    models.AutoField(
                        db_column="typeID", primary_key=True, serialize=False
                    ),
                ),
                ("groupid", models.IntegerField(db_column="groupID", null=True)),
                (
                    "typename",
                    models.CharField(db_column="typeName", max_length=150, null=True),
                ),
                ("description", models.TextField(null=True)),
                ("mass", models.FloatField(null=True)),
                ("volume", models.FloatField(null=True)),
                ("capacity", models.FloatField(null=True)),
                (
                    "portionsize",
                    models.IntegerField(db_column="portionSize", null=True),
                ),
                ("raceid", models.IntegerField(db_column="raceID", null=True)),
                ("baseprice", models.FloatField(db_column="basePrice", null=True)),
                ("published", models.BooleanField(null=True)),
                (
                    "marketgroupid",
                    models.IntegerField(db_column="marketGroupID", null=True),
                ),
                ("iconid", models.IntegerField(db_column="iconID", null=True)),
                ("soundid", models.IntegerField(db_column="soundID", null=True)),
                ("graphicid", models.IntegerField(db_column="graphicID", null=True)),
            ],
            options={
                "db_table": "invTypes",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mapconstellations",
            fields=[
                (
                    "regionid",
                    models.IntegerField(blank=True, db_column="regionID", null=True),
                ),
                (
                    "constellationid",
                    models.AutoField(
                        db_column="constellationID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "constellationname",
                    models.CharField(
                        blank=True,
                        db_column="constellationName",
                        max_length=150,
                        null=True,
                    ),
                ),
                ("x", models.FloatField(blank=True, null=True)),
                ("y", models.FloatField(blank=True, null=True)),
                ("z", models.FloatField(blank=True, null=True)),
                ("xmin", models.FloatField(blank=True, db_column="xMin", null=True)),
                ("xmax", models.FloatField(blank=True, db_column="xMax", null=True)),
                ("ymin", models.FloatField(blank=True, db_column="yMin", null=True)),
                ("ymax", models.FloatField(blank=True, db_column="yMax", null=True)),
                ("zmin", models.FloatField(blank=True, db_column="zMin", null=True)),
                ("zmax", models.FloatField(blank=True, db_column="zMax", null=True)),
                (
                    "factionid",
                    models.IntegerField(blank=True, db_column="factionID", null=True),
                ),
                ("radius", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "mapConstellations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mapregions",
            fields=[
                (
                    "regionid",
                    models.AutoField(
                        db_column="regionID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "regionname",
                    models.CharField(
                        blank=True, db_column="regionName", max_length=150, null=True
                    ),
                ),
                ("x", models.FloatField(blank=True, null=True)),
                ("y", models.FloatField(blank=True, null=True)),
                ("z", models.FloatField(blank=True, null=True)),
                ("xmin", models.FloatField(blank=True, db_column="xMin", null=True)),
                ("xmax", models.FloatField(blank=True, db_column="xMax", null=True)),
                ("ymin", models.FloatField(blank=True, db_column="yMin", null=True)),
                ("ymax", models.FloatField(blank=True, db_column="yMax", null=True)),
                ("zmin", models.FloatField(blank=True, db_column="zMin", null=True)),
                ("zmax", models.FloatField(blank=True, db_column="zMax", null=True)),
                (
                    "factionid",
                    models.IntegerField(blank=True, db_column="factionID", null=True),
                ),
                ("nebula", models.IntegerField(blank=True, null=True)),
                ("radius", models.FloatField(blank=True, null=True)),
            ],
            options={
                "db_table": "mapRegions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mapsolarsystemjumps",
            fields=[
                (
                    "fromregionid",
                    models.IntegerField(
                        blank=True, db_column="fromRegionID", null=True
                    ),
                ),
                (
                    "fromconstellationid",
                    models.IntegerField(
                        blank=True, db_column="fromConstellationID", null=True
                    ),
                ),
                (
                    "fromsolarsystemid",
                    models.AutoField(
                        db_column="fromSolarSystemID", primary_key=True, serialize=False
                    ),
                ),
                ("tosolarsystemid", models.IntegerField(db_column="toSolarSystemID")),
                (
                    "toconstellationid",
                    models.IntegerField(
                        blank=True, db_column="toConstellationID", null=True
                    ),
                ),
                (
                    "toregionid",
                    models.IntegerField(blank=True, db_column="toRegionID", null=True),
                ),
            ],
            options={
                "db_table": "mapSolarSystemJumps",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Mapsolarsystems",
            fields=[
                (
                    "regionid",
                    models.IntegerField(blank=True, db_column="regionID", null=True),
                ),
                (
                    "constellationid",
                    models.IntegerField(
                        blank=True, db_column="constellationID", null=True
                    ),
                ),
                (
                    "solarsystemid",
                    models.AutoField(
                        db_column="solarSystemID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "solarsystemname",
                    models.CharField(
                        blank=True,
                        db_column="solarSystemName",
                        max_length=150,
                        null=True,
                    ),
                ),
                ("x", models.FloatField(blank=True, null=True)),
                ("y", models.FloatField(blank=True, null=True)),
                ("z", models.FloatField(blank=True, null=True)),
                ("xmin", models.FloatField(blank=True, db_column="xMin", null=True)),
                ("xmax", models.FloatField(blank=True, db_column="xMax", null=True)),
                ("ymin", models.FloatField(blank=True, db_column="yMin", null=True)),
                ("ymax", models.FloatField(blank=True, db_column="yMax", null=True)),
                ("zmin", models.FloatField(blank=True, db_column="zMin", null=True)),
                ("zmax", models.FloatField(blank=True, db_column="zMax", null=True)),
                ("luminosity", models.FloatField(blank=True, null=True)),
                ("border", models.BooleanField(blank=True, null=True)),
                ("fringe", models.BooleanField(blank=True, null=True)),
                ("corridor", models.BooleanField(blank=True, null=True)),
                ("hub", models.BooleanField(blank=True, null=True)),
                ("international", models.BooleanField(blank=True, null=True)),
                ("regional", models.BooleanField(blank=True, null=True)),
                ("constellation", models.BooleanField(blank=True, null=True)),
                ("security", models.FloatField(blank=True, null=True)),
                (
                    "factionid",
                    models.IntegerField(blank=True, db_column="factionID", null=True),
                ),
                ("radius", models.FloatField(blank=True, null=True)),
                (
                    "suntypeid",
                    models.IntegerField(blank=True, db_column="sunTypeID", null=True),
                ),
                (
                    "securityclass",
                    models.CharField(
                        blank=True, db_column="securityClass", max_length=150, null=True
                    ),
                ),
            ],
            options={
                "db_table": "mapSolarSystems",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Ramactivities",
            fields=[
                (
                    "activityid",
                    models.AutoField(
                        db_column="activityID", primary_key=True, serialize=False
                    ),
                ),
                (
                    "activityname",
                    models.CharField(
                        blank=True, db_column="activityName", max_length=150, null=True
                    ),
                ),
                (
                    "iconno",
                    models.CharField(
                        blank=True, db_column="iconNo", max_length=150, null=True
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=150, null=True),
                ),
                ("published", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "db_table": "ramActivities",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Stastations",
            fields=[
                (
                    "stationid",
                    models.AutoField(
                        db_column="stationID", primary_key=True, serialize=False
                    ),
                ),
                ("security", models.FloatField(blank=True, null=True)),
                (
                    "dockingcostpervolume",
                    models.FloatField(
                        blank=True, db_column="dockingCostPerVolume", null=True
                    ),
                ),
                (
                    "maxshipvolumedockable",
                    models.FloatField(
                        blank=True, db_column="maxShipVolumeDockable", null=True
                    ),
                ),
                (
                    "officerentalcost",
                    models.IntegerField(
                        blank=True, db_column="officeRentalCost", null=True
                    ),
                ),
                (
                    "operationid",
                    models.IntegerField(blank=True, db_column="operationID", null=True),
                ),
                (
                    "stationtypeid",
                    models.IntegerField(
                        blank=True, db_column="stationTypeID", null=True
                    ),
                ),
                (
                    "corporationid",
                    models.IntegerField(
                        blank=True, db_column="corporationID", null=True
                    ),
                ),
                (
                    "solarsystemid",
                    models.IntegerField(
                        blank=True, db_column="solarSystemID", null=True
                    ),
                ),
                (
                    "constellationid",
                    models.IntegerField(
                        blank=True, db_column="constellationID", null=True
                    ),
                ),
                (
                    "regionid",
                    models.IntegerField(blank=True, db_column="regionID", null=True),
                ),
                (
                    "stationname",
                    models.CharField(
                        blank=True, db_column="stationName", max_length=150, null=True
                    ),
                ),
                ("x", models.FloatField(blank=True, null=True)),
                ("y", models.FloatField(blank=True, null=True)),
                ("z", models.FloatField(blank=True, null=True)),
                (
                    "reprocessingefficiency",
                    models.FloatField(
                        blank=True, db_column="reprocessingEfficiency", null=True
                    ),
                ),
                (
                    "reprocessingstationstake",
                    models.FloatField(
                        blank=True, db_column="reprocessingStationsTake", null=True
                    ),
                ),
                (
                    "reprocessinghangarflag",
                    models.IntegerField(
                        blank=True, db_column="reprocessingHangarFlag", null=True
                    ),
                ),
            ],
            options={
                "db_table": "staStations",
                "managed": False,
            },
        ),
    ]
